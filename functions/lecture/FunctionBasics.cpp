/**
 * НЕ создавайте переменную, если планируете использовать её только 1 раз.
 * Это бессмысленно.
 * Создавайте переменные для хранения какого-то значения, если
 * она будет использовать во многих местах.
 *
 * SRP - Single Responsibility Principle
 * Принцип Единой Ответственности (Обязанности)
 * <p>
 * Метод - блок кода, выполняет определённую функция
 * <p>
 * Метод = Функция = Процедура
 * <p>
 * Метод - это как отдельный помошник
 * Этому помошнику можно что-то дать для работы
 * Помошник может что-то вернуть (return)
 * в качестве результата своей работы.
 * <p>
 * Данный пример демонстрирует простейшие примеры функций.
 * <p>
 * Помните, что когда речь заходит о функциях,
 * вы должны четко держать в голове 4 основных момента,
 * связанных с ними:
 * 1) Тип функции - это тип того, что она возвращает.
 * То есть, если ваша функция что-то возвращает,
 * (return *что-то*)
 * То тип вашей функции должен соответствовать типу
 * возвращаемого элемента.
 * Если функция возвращает int, то тип функции тоже int
 * Если double, то тип функции тоже double и т.д.
 * 2) То, что функция возвращает - это то, что стоит на месте вызова функции в main().
 * То есть, представьте, что у вас есть функция:
 * int myFunc(){
 *      int result = 78;
 *      return result;
 * }
 * <p>
 * Как видите, она возвращает вам целое число, в данном случае - 78.
 * <p>
 * В main() у нас есть следующий код:
 * <p>
 * int main()
 * {
 *      cout << myFunc() << endl;
 * }
 * Как видите, наша функция myFunc() возвращает целое число, а значит
 * в main() на месте вызова этой функции теперь стоит то, что она возврашает,
 * то есть - 78!
 * И, как видите, я использую cout, потому что я обращаюсь с вызовом функции myFunc()
 * в main() так, как если бы на его (вызова) месте было бы число 78. Я просто вывожу число 78 на консоль.
 * Точно также я могу написать
 * cout << myFunc() + 8 << endl;
 * И он выведет мне 86 (78 + 8).
 * 3) Если ваша функция ничего не возвращает - ее тип void.
 * Ваша функция может делать миллион различных операций и все то, что вы захотите, но если она
 * ничего в конце не вернет - ее тип данных будет void.
 * Представьте, что у вас есть функция:
 * void sayMyName()
 * {
 *      cout << "My name is Handor" << endl;
 * }
 * <p>
 * Как видите, она ничего не возвращает (т.е. нет никакого return *что-то*).
 * В main() нам лишь достаточно ее просто вызвать:
 * int main()
 * {
 *      sayMyName();
 * }
 * И на консоль выведется "My name is Handor".
 * В main() мы уже не используем cout <<, потому что вывод осуществляется в самой функции.
 * Вы всегда должны помнить, что вывод какой-либо информации на консоль (если он нужен),
 * производит либо в самой функции, либо, если функция только возвращает вам что-то, но
 * сама ничего не выводит, тогда вывод происходит в main().
 * В первом примере (2-ой пункт), функция сама ничего не выводила, только возвращала,
 * поэтому мы выводили то, что она возвращает через main() на консоль.
 * Во втором прере наша функция сама выводит информацию на консоль, а значит
 * в main() нам не нужно заново писать cout << sayMyName() << endl;
 * Достаточно лишь вызвать эту функцию.
 * 4) В void функциях тоже можно использовать команду return.
 * Сама по себе команда return может быть использована и в void функциях.
 * Команда return (без какого-либо элемента, следующего за ней)
 * завершает выполнение функции (то есть просто напросто обрывает ее).
 **/

#include <iostream>
#include <string>
#include <cmath>
using namespace std;

/* Простая функция, которая возвращает сумму двух переданных ей параметров */
int find_sum (int x = 3, int y) {
    int sum = x + y;
    return sum;
}

/* Пример void метода, который принимает один String в качестве имени
* и привествует, основываясь на этом имени*/














void greetings (char c) {
    cout << c;
}

int main() {
    greeting('A');
}




/*
1) создать функцию с типом возвращаемого значения bool
2) назвать функцию is_even
3) в аттрибутах указать одну переменную типа int
4) функция возвращает 1, если остаток от деления аттрибута на 2 равен нулю
5) функция возвращает 0, если остаток от деления аттрибута на 2 не равен нулю
6) вызвать функцию в функции main() и вывести возвращенное значение в консоль
*/
bool is_multiple_by_7 (int number)
{
    // проверка, что остаток от деления аттрибута на 7 равен нулю
    return number % 7 == 0;
}

int my_pow (int base, int power)
{
    int prod = 1;
    for (int i = 0; i < power; i++)
        prod *= base;

    return prod;
}



int find_y (int x)
{
    // y = x^5 - x^4 + x^3 - x^2 + x
    return my_pow(x, 5) - my_pow(x, 4) + my_pow(x, 3) - my_pow(x, 2) + x;
}

int main()
{
    setlocale(LC_ALL, "Russian");

    cout << 16 << endl;
    cout << find_sum (983, 1826) + 1 << endl;
    int qwe = find_sum(12, 13);
    cout << "qwe = " << qwe << endl;
    cout << find_sum (-623, 18) << endl;
    cout << 8123 << endl;
    cout << find_sum (-1, -987) << endl << endl;
    int qwerty = find_sum(3, 4);
    cout << "\tqwerty" << qwerty << endl;

    cout << is_mul


    cout << "hello";
    is_even("Carl");
    cout << 
    greetings("Askar");
    greetings("Handor");
    greetings("Dinara");


    cout << "\nВведите какое-то число: ";
    int tempVal;
    cin >> tempVal;

    if (is_multiple_by_7(tempVal))
        cout << "ДА! " << tempVal << " делится на 7!" << endl;
    else
        cout << "НЕТ! " << tempVal << " не делится на 7!" << endl;

    cout << "\nВведите основание степени: ";
    int base;
    cin >> base;
    cout << "Введите показатель степени (целое число): ";
    int power;
    cin >> power;

    cout << "pow() = " << pow(base, power) << endl;
    cout << "my_pow() = " << my_pow(base, power) << endl;

    cout << "\nВведите x: ";
    int x;
    cin >> x;
    cout << " y = " << find_y(x);

    cout << "\nВведите x: ";
    cin >> x;
    cout << " y = " << find_y(x);

    cout << "\nВведите x: ";
    cin >> x;
    cout << " y = " << find_y(x);

    cout << "\nВведите x: ";
    cin >> x;
    cout << " y = " << find_y(x);

    return 0;
}