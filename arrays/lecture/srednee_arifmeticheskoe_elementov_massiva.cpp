/**
*
* Данная программа вычисляет среднее арифметическое значение
* всех элементов массива.
* А также приводит пример использования cast operator, или кастинга.
* Cast operator применяется для того, чтобы временно изменить тип данных.
* Например: Если мы напишем
* double d = 2.56;
* cout<<(int)d<<endl;
*
* Программа нам выведет просто 2.
* В данном примере cast operator - это (int). Он меняет (ВРЕМЕННО!!!) тип данных переменной d с double на int.
*
* Почему временно? Потому что тип данных поменяется только на этой строчке и только для этого вывода.
* До и после этой строчки тип данных переменной d был и останется double.
*
* Задача: Пользователь вводит целое число (n), обозначающее количество элементов.
* Далее вводит n элементов. Далее программа выводит среднее арифметическое этих элементов.
*
* Пример:
*
* Пользователь ввел: 5
* Далее ввел: 7 7 3 2 6
* Программа выведет: 5
*
**/
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");

    // Объявление массива, который может вмещать в себя максимум 100 целых чисел
    int ar[100];

    // Объявление и ввод переменной, отвечающей за количество элементов в массиве
    cout<<"Введите размер массива: ";
    int n;
    cin>>n;

    // Ввод n-ого количества элементов
    cout<<"\nВведите "<<n<<" целых чисел:"<<endl;
    for(int i = 0; i < n; i++)
        cin>>ar[i];

    // Переменная, представляющая собой сумму всех элементов массива
    int sum = 0;

    // Цикл для прохождения по всем элементам массива с последующим их суммированием
    for(int i =0; i < n ; i++)
        sum+=ar[i];

    /*
    Использование cast operator (кастинга) для того, чтобы результат деления
    integer на integer был дробным числом (в случае конечно, если результат реально дробный.
    Например при делении 10 на 4, если не поставить cast operator, программа выведет 2,
    а если поставить - 2.5
    */
    cout<<"\nСреднее арифметическое всех элементов массива: "<<(double)sum/n<<endl;

    // Расскомментируйте следующую строку, если Вы работете в Visual Studio
    // system("pause");
    return 0;
}