/**
*
* Задача: пользователь вводит элементы массива до тех пор, пока не введет 0.
* То есть 0 - будет последним введенным элементом массива.
*
* Если в массиве встречаются 3 одинаковых элемента, следующих друг за другом, программа выводит YES.
* Если таковой последовательности нет - NO.
*
* Данная программа является ярчайшим примером использования bool переменных,
* которые могут играль роль триггера или переключателя.
*
* Bool переменные очень удобно использовать в таких задачах, где в результате могут быть
* только 2 варианта ответа. Либо "Да", либо "Нет". Либо "Есть", либо "Нет.
*
* Вот и в данной заладе нам требуется лишь узнать, ест ли такая последовательность
* или нет.
*
* Нас не просят узнать, на каком моменте она встретиться или какие элементы в неё входят.
*
* Только лишь "Есть" или "Нет".
*
**/
#include <iostream>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    int a[100];
    int index = 0;

    cout<<"Вводите целые числа сколько хотите."<<endl;
    cout<<"Для завершения введите \"0\" и нажмите Enter."<<endl;

    int userInput;
    cin>>userInput;

    while (userInput != 0)
    {
        a[index++] = userInput;
        cin>>userInput;
    }

    /*
     * Объявляем bool переменную b, которая будет играть роль переключателя.
     * Изначально, она равно false. Т.е. подразумеваем, что искомая последовательность ещё не найдена.
     * Если искомая последовательность будет найдена. НЕВАЖНО где, главное найдена.
     * То b переключиться в положение true.
     * После того, как мы пройдём по массиву, если b будет равна false, то значит искомая последовательность
     * нигде не была обнаружена. А если будет равно true, то значит искомая последовательность была найдена.
     *
    */
    bool b = false;

    for (int i = 0; i < index - 2; i++)
    {
        if(a[i] == a[i+1] && a[i] == a[i+2])
            b = true;
    }

    if(b)
        cout<<"Последовательность была найдена."<<endl;
    else
        cout<<"Последовательность не была найдена"<<endl;

    //system("pause");
    return 0;
}