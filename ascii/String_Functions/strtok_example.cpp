/**
*
* Данная программа демонстрирует работу функции
*
* char *strtok(char *s1, const char *s2 );
*
* Данная функция реализует процесс токенизирования.
*
* Токенизирование - это процесс разбития строки на логические кусочки,
* разделитель между которыми называется делиметром.
* Логические кусочки называются токенами.
*
* Функция делит первый аргумент s1 на токены, по делиметру, содержащемуся
* во втором аргументе s2.
* При первом вызове функции s1 идет в качестве первого аргумента, а
* при всех последующих вызовах для продолжения токенизирования, в качестве
* первого аргумента выступает так называемый NULL.
*
* При каждом вызове функции возвращается поинтер на текущий токен.
*
* Когда при очередном вызове функции токен больше не возвращается,
* (достигнут конец делимой строки), функция возвращает NULL.
*
**/

#include <iostream>
#include <cstring>
using namespace std;
int main()
{
    char c[100] = "The weather is awful";

    char* ptr = NULL; /* Поинтер, который будет указывать
                        на текущий токен, изначально равен NULL */

    ptr = strtok(c, " "); /* Сейчас поинтер указывает на самый первый токен
                            т.е. логический кусок от самого начала строки с
                            до ближашего делиметра (разделителя), коим в данном
                            примере служит пробел */

    int counter = 0;/* Счетчик для подсчета токенов */

    /* Условие цикла "Пока поинтер не равен NULL", как я
    упоминал выше, поинтер будет NULL только когда больше
    не будет токенов, т.е. когда будет достигнут конец делимой строки */
    while(ptr != NULL)
    {
        counter++; /* Подсчитываем текущий токен */
        cout<<ptr<<endl; /* Выводим текущий токен */
        ptr = strtok(NULL, " "); /* Теперь наш поинтер указывает на СЛЕДУЮЩИЙ токен */
    }

    cout<<counter<<endl; /* Под конец выводим общее количество токенов */
    //system("pause");
    return 0;
}